# Generated from Promise.g4 by ANTLR 4.6
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2%")
        buf.write("\u012f\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\3\2\3")
        buf.write("\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\24\3\24")
        buf.write("\3\25\3\25\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34\3\35")
        buf.write("\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3\37\3 \6 \u010d\n")
        buf.write(" \r \16 \u010e\3 \7 \u0112\n \f \16 \u0115\13 \3!\6!\u0118")
        buf.write("\n!\r!\16!\u0119\3\"\6\"\u011d\n\"\r\"\16\"\u011e\3\"")
        buf.write("\3\"\6\"\u0123\n\"\r\"\16\"\u0124\3#\3#\3$\6$\u012a\n")
        buf.write("$\r$\16$\u012b\3$\3$\2\2%\3\3\5\4\7\5\t\6\13\7\r\b\17")
        buf.write("\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23")
        buf.write("%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36")
        buf.write(";\37= ?!A\"C#E$G%\3\2\5\4\2C\\c|\3\2\62;\5\2\13\f\17\17")
        buf.write("\"\"\u0134\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2")
        buf.write("\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2")
        buf.write("\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2")
        buf.write("\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#")
        buf.write("\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2")
        buf.write("\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65")
        buf.write("\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2")
        buf.write("\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2")
        buf.write("\2\3I\3\2\2\2\5K\3\2\2\2\7Z\3\2\2\2\tc\3\2\2\2\13l\3\2")
        buf.write("\2\2\rx\3\2\2\2\17\u0081\3\2\2\2\21\u0095\3\2\2\2\23\u009e")
        buf.write("\3\2\2\2\25\u00a8\3\2\2\2\27\u00b5\3\2\2\2\31\u00bd\3")
        buf.write("\2\2\2\33\u00c1\3\2\2\2\35\u00c9\3\2\2\2\37\u00d2\3\2")
        buf.write("\2\2!\u00dc\3\2\2\2#\u00e1\3\2\2\2%\u00e9\3\2\2\2\'\u00eb")
        buf.write("\3\2\2\2)\u00ed\3\2\2\2+\u00ef\3\2\2\2-\u00f1\3\2\2\2")
        buf.write("/\u00f3\3\2\2\2\61\u00f5\3\2\2\2\63\u00fa\3\2\2\2\65\u00fc")
        buf.write("\3\2\2\2\67\u00ff\3\2\2\29\u0102\3\2\2\2;\u0105\3\2\2")
        buf.write("\2=\u0108\3\2\2\2?\u010c\3\2\2\2A\u0117\3\2\2\2C\u011c")
        buf.write("\3\2\2\2E\u0126\3\2\2\2G\u0129\3\2\2\2IJ\7<\2\2J\4\3\2")
        buf.write("\2\2KL\7r\2\2LM\7t\2\2MN\7g\2\2NO\7f\2\2OP\7k\2\2PQ\7")
        buf.write("e\2\2QR\7c\2\2RS\7v\2\2ST\7g\2\2TU\7\"\2\2UV\7v\2\2VW")
        buf.write("\7j\2\2WX\7c\2\2XY\7v\2\2Y\6\3\2\2\2Z[\7n\2\2[\\\7q\2")
        buf.write("\2\\]\7e\2\2]^\7c\2\2^_\7v\2\2_`\7k\2\2`a\7q\2\2ab\7p")
        buf.write("\2\2b\b\3\2\2\2cd\7f\2\2de\7w\2\2ef\7t\2\2fg\7c\2\2gh")
        buf.write("\7v\2\2hi\7k\2\2ij\7q\2\2jk\7p\2\2k\n\3\2\2\2lm\7n\2\2")
        buf.write("mn\7c\2\2no\7p\2\2op\7g\2\2pq\7\"\2\2qr\7e\2\2rs\7j\2")
        buf.write("\2st\7c\2\2tu\7p\2\2uv\7i\2\2vw\7g\2\2w\f\3\2\2\2xy\7")
        buf.write("n\2\2yz\7c\2\2z{\7p\2\2{|\7g\2\2|}\7\"\2\2}~\7i\2\2~\177")
        buf.write("\7c\2\2\177\u0080\7r\2\2\u0080\16\3\2\2\2\u0081\u0082")
        buf.write("\7f\2\2\u0082\u0083\7k\2\2\u0083\u0084\7u\2\2\u0084\u0085")
        buf.write("\7v\2\2\u0085\u0086\7c\2\2\u0086\u0087\7p\2\2\u0087\u0088")
        buf.write("\7e\2\2\u0088\u0089\7g\2\2\u0089\u008a\7\"\2\2\u008a\u008b")
        buf.write("\7v\2\2\u008b\u008c\7q\2\2\u008c\u008d\7\"\2\2\u008d\u008e")
        buf.write("\7x\2\2\u008e\u008f\7g\2\2\u008f\u0090\7j\2\2\u0090\u0091")
        buf.write("\7k\2\2\u0091\u0092\7e\2\2\u0092\u0093\7n\2\2\u0093\u0094")
        buf.write("\7g\2\2\u0094\20\3\2\2\2\u0095\u0096\7g\2\2\u0096\u0097")
        buf.write("\7s\2\2\u0097\u0098\7w\2\2\u0098\u0099\7c\2\2\u0099\u009a")
        buf.write("\7n\2\2\u009a\u009b\7\"\2\2\u009b\u009c\7v\2\2\u009c\u009d")
        buf.write("\7q\2\2\u009d\22\3\2\2\2\u009e\u009f\7n\2\2\u009f\u00a0")
        buf.write("\7g\2\2\u00a0\u00a1\7u\2\2\u00a1\u00a2\7u\2\2\u00a2\u00a3")
        buf.write("\7\"\2\2\u00a3\u00a4\7v\2\2\u00a4\u00a5\7j\2\2\u00a5\u00a6")
        buf.write("\7c\2\2\u00a6\u00a7\7p\2\2\u00a7\24\3\2\2\2\u00a8\u00a9")
        buf.write("\7i\2\2\u00a9\u00aa\7t\2\2\u00aa\u00ab\7g\2\2\u00ab\u00ac")
        buf.write("\7c\2\2\u00ac\u00ad\7v\2\2\u00ad\u00ae\7g\2\2\u00ae\u00af")
        buf.write("\7t\2\2\u00af\u00b0\7\"\2\2\u00b0\u00b1\7v\2\2\u00b1\u00b2")
        buf.write("\7j\2\2\u00b2\u00b3\7c\2\2\u00b3\u00b4\7p\2\2\u00b4\26")
        buf.write("\3\2\2\2\u00b5\u00b6\7d\2\2\u00b6\u00b7\7g\2\2\u00b7\u00b8")
        buf.write("\7v\2\2\u00b8\u00b9\7y\2\2\u00b9\u00ba\7g\2\2\u00ba\u00bb")
        buf.write("\7g\2\2\u00bb\u00bc\7p\2\2\u00bc\30\3\2\2\2\u00bd\u00be")
        buf.write("\7c\2\2\u00be\u00bf\7p\2\2\u00bf\u00c0\7f\2\2\u00c0\32")
        buf.write("\3\2\2\2\u00c1\u00c2\7c\2\2\u00c2\u00c3\7x\2\2\u00c3\u00c4")
        buf.write("\7g\2\2\u00c4\u00c5\7t\2\2\u00c5\u00c6\7c\2\2\u00c6\u00c7")
        buf.write("\7i\2\2\u00c7\u00c8\7g\2\2\u00c8\34\3\2\2\2\u00c9\u00ca")
        buf.write("\7x\2\2\u00ca\u00cb\7c\2\2\u00cb\u00cc\7t\2\2\u00cc\u00cd")
        buf.write("\7k\2\2\u00cd\u00ce\7c\2\2\u00ce\u00cf\7p\2\2\u00cf\u00d0")
        buf.write("\7e\2\2\u00d0\u00d1\7g\2\2\u00d1\36\3\2\2\2\u00d2\u00d3")
        buf.write("\7e\2\2\u00d3\u00d4\7q\2\2\u00d4\u00d5\7n\2\2\u00d5\u00d6")
        buf.write("\7n\2\2\u00d6\u00d7\7k\2\2\u00d7\u00d8\7u\2\2\u00d8\u00d9")
        buf.write("\7k\2\2\u00d9\u00da\7q\2\2\u00da\u00db\7p\2\2\u00db \3")
        buf.write("\2\2\2\u00dc\u00dd\7u\2\2\u00dd\u00de\7v\2\2\u00de\u00df")
        buf.write("\7q\2\2\u00df\u00e0\7r\2\2\u00e0\"\3\2\2\2\u00e1\u00e2")
        buf.write("\7r\2\2\u00e2\u00e3\7t\2\2\u00e3\u00e4\7q\2\2\u00e4\u00e5")
        buf.write("\7o\2\2\u00e5\u00e6\7k\2\2\u00e6\u00e7\7u\2\2\u00e7\u00e8")
        buf.write("\7g\2\2\u00e8$\3\2\2\2\u00e9\u00ea\7*\2\2\u00ea&\3\2\2")
        buf.write("\2\u00eb\u00ec\7+\2\2\u00ec(\3\2\2\2\u00ed\u00ee\7]\2")
        buf.write("\2\u00ee*\3\2\2\2\u00ef\u00f0\7_\2\2\u00f0,\3\2\2\2\u00f1")
        buf.write("\u00f2\7o\2\2\u00f2.\3\2\2\2\u00f3\u00f4\7u\2\2\u00f4")
        buf.write("\60\3\2\2\2\u00f5\u00f6\7m\2\2\u00f6\u00f7\7o\2\2\u00f7")
        buf.write("\u00f8\7\61\2\2\u00f8\u00f9\7j\2\2\u00f9\62\3\2\2\2\u00fa")
        buf.write("\u00fb\7#\2\2\u00fb\64\3\2\2\2\u00fc\u00fd\7(\2\2\u00fd")
        buf.write("\u00fe\7(\2\2\u00fe\66\3\2\2\2\u00ff\u0100\7~\2\2\u0100")
        buf.write("\u0101\7~\2\2\u01018\3\2\2\2\u0102\u0103\7/\2\2\u0103")
        buf.write("\u0104\7@\2\2\u0104:\3\2\2\2\u0105\u0106\7/\2\2\u0106")
        buf.write("\u0107\7~\2\2\u0107<\3\2\2\2\u0108\u0109\7/\2\2\u0109")
        buf.write("\u010a\7>\2\2\u010a>\3\2\2\2\u010b\u010d\t\2\2\2\u010c")
        buf.write("\u010b\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u010c\3\2\2\2")
        buf.write("\u010e\u010f\3\2\2\2\u010f\u0113\3\2\2\2\u0110\u0112\t")
        buf.write("\3\2\2\u0111\u0110\3\2\2\2\u0112\u0115\3\2\2\2\u0113\u0111")
        buf.write("\3\2\2\2\u0113\u0114\3\2\2\2\u0114@\3\2\2\2\u0115\u0113")
        buf.write("\3\2\2\2\u0116\u0118\t\3\2\2\u0117\u0116\3\2\2\2\u0118")
        buf.write("\u0119\3\2\2\2\u0119\u0117\3\2\2\2\u0119\u011a\3\2\2\2")
        buf.write("\u011aB\3\2\2\2\u011b\u011d\t\3\2\2\u011c\u011b\3\2\2")
        buf.write("\2\u011d\u011e\3\2\2\2\u011e\u011c\3\2\2\2\u011e\u011f")
        buf.write("\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0122\7\60\2\2\u0121")
        buf.write("\u0123\t\3\2\2\u0122\u0121\3\2\2\2\u0123\u0124\3\2\2\2")
        buf.write("\u0124\u0122\3\2\2\2\u0124\u0125\3\2\2\2\u0125D\3\2\2")
        buf.write("\2\u0126\u0127\7\60\2\2\u0127F\3\2\2\2\u0128\u012a\t\4")
        buf.write("\2\2\u0129\u0128\3\2\2\2\u012a\u012b\3\2\2\2\u012b\u0129")
        buf.write("\3\2\2\2\u012b\u012c\3\2\2\2\u012c\u012d\3\2\2\2\u012d")
        buf.write("\u012e\b$\2\2\u012eH\3\2\2\2\t\2\u010e\u0113\u0119\u011e")
        buf.write("\u0124\u012b\3\b\2\2")
        return buf.getvalue()


class PromiseLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    NOT = 25
    CON = 26
    OPT = 27
    SEQ = 28
    UNTIL = 29
    DAEMON = 30
    ID = 31
    INT = 32
    FLOAT = 33
    END = 34
    WS = 35

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "':'", "'predicate that'", "'location'", "'duration'", "'lane change'", 
            "'lane gap'", "'distance to vehicle'", "'equal to'", "'less than'", 
            "'greater than'", "'between'", "'and'", "'average'", "'variance'", 
            "'collision'", "'stop'", "'promise'", "'('", "')'", "'['", "']'", 
            "'m'", "'s'", "'km/h'", "'!'", "'&&'", "'||'", "'->'", "'-|'", 
            "'-<'", "'.'" ]

    symbolicNames = [ "<INVALID>",
            "NOT", "CON", "OPT", "SEQ", "UNTIL", "DAEMON", "ID", "INT", 
            "FLOAT", "END", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "NOT", "CON", "OPT", 
                  "SEQ", "UNTIL", "DAEMON", "ID", "INT", "FLOAT", "END", 
                  "WS" ]

    grammarFileName = "Promise.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.6")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


